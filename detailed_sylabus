# **თავი 1 - შესავალი Python-ში**
- გაცნობა VSCode-თან(ედიტორი როგორც ელექტრონული რვეული, ფოლდერების და ფაილების სტრუქტურა, კოდის საწერი ფაილი და ტერმინალი)
- საბაზისო I/O - input() და print(), ცვლადები: გამოცხადება, მინიჭება, დინამიურობა
- ტიპები და ობიექტები თეორიული ახსნა: აბსტრაქცია(მათ შორის მათემატიკურ ჭრილშიც) და კერძო შემთხვევა
- ტიპები: str(), int(), float(), bool() და type()
- არითმეტიკული ოპერატორები: შეკრება, გამოკლება, გამრავლება, ნაშთიანი გაყოფა, უნაშთო გაყოფა, ნაშთის პოვნა და ახარისხება
- შეკრება vs კონკატენაცია(შეწებება) და შეცდომა "+" მოქმედების ნიშნის გამოყენებისას სხვადასხვა ტიპის ობიექტების შემთხვევაში
- გამრავლება და რეპლიკაცია
- შედარება(უდრის, არ უდრის, მეტია, ნაკლებია, მეტია ან ტოლია, ნაკლებია ან ტოლია) vs შედარება მონაცემთა ტიპების გათვალისწინებით
- უდრის(==) vs არის(is)
- სტრინგის ფორმატირება: concatenation, f-strings, format(), %-formatting
- კომენტარები

# **სემინარი**
- სთრინგის მეთოდების გარჩევა (W3schools)


# **თავი 2 - ფუნქციები და პირობითი ოპერატორები**
- ფუნქცია როგორც გარდაქმნის, გარდასახვის, შედარების ან კიდევ სხვა მექანიზმი
- ფუნქცია რომელსაც აქვს შესავალი ინფუთ მნიშვნელობისთვის და გამოსავალი აუთფუთ მნიშვნელობისთვის:

ინფუთად გადაცემული რაიმე მნიშვნელობა -> ფუნქციის მექანიზმი -> დაბრუნებული შედეგი

-  პითონური ფუნქციის(რომელიც ღებულობს ინფუთს და აბრუნებს აუთფუთს) სინტაქსი: განმსაზღვრელი ხაზი + ინსტრუქციები + რეთურნ ხაზი
-  ფუნქციის განმსაზღვრელი ხაზი:
  
def ქივორდი + ფუნქციის სახელი + "()" როგორც შესავალი წერტილი ინფუთ მნიშველობისთვის, პარამეტრი  და ":" როგორც ფუნქციის სქოუფის დასაწყისი

- ფუნქციის სქოუფი როგორც იდენტაციით ცალკე გამოყოფილი სივრცე
- ფუნქციისთვის გაწერილი პარამეტრი როგორც პლეისჰოლდერივით ფუნქციისთვის ინფუთად გადაცემული მნიშვნელობისთვის
- სქოუფში პარამეტრისთვის გაწერილი ინსტრუქციები  და რეთურნი
- მრავალპარამეტრიანი და ფუნქცია რომელიც მრავალ მნიშვნელობას აბრუნებს
- ფუნქცია print() დასახელებული პარამეტრები
- ლოკალური და გლობალური ცვლადები
- ფუნქციის განსაზღვრა ანუ ერთჯერადად ფუნქციის აბსტრაქტული ჩანაწერია გაკეთება
- ფუნქციის მრავალჯერადა გამოძახება და ფუნქციის არგუმენტი - პარამეტრის ადგილას გადაცემული კონკრეტული მნიშვნელობა
- ფუნქცია რომელიც ღებულობს ინფუთს, მაგრამ არ აბრუნებს აუთფუთს
- ფუნქცია რომელიც არ ღებულობს ინფუთს, მაგრამ აბრუნებს აუთფუთს
- ფუნქცია რომელიც არც ინფუთს ღებულობს და არც აუთფუთს აბრუნებს(იძახებს სხვა ფუნქციებს)
- lambda ფუნქცია


პირობითი მტკიცებები:
- პირობითი ოპერატორი როგორც რაიმე პირობის შესრულაბაზე დამოკიდებული ინსტრუქციების გაწერის საშუალება
- if/elif/else კონსტრუქცია, ბლოკი, სქოუფი და პირობების ალტერნატიულობა
- if/elif/else vs if/if/if კონსტრუქცია და პირობების კომპლემენტარულობა

ლოგიკური ოპერატორები:
- and, or და not ოპერატორები

- ერთმანეთში ჩაშენებული პირობითი მკიცებები
- "if ... and ..." vs if-ი ჩაშენებული if-ში
- "if ... or ... or ..." vs if/elif/else

# **სემინარი**
- ფუნქციების და პირობითი ოპერატორების კომბინაციაში გამოყენება რაიმე პროექტში

# **თავი 3 - ციკლები და მონაცემთა სტრუქტურები**
- რა არის ციკლი(რატომ "ციკლი"?-აღსასრულებლად გადაცემული ინსტრუქციების განმეორებადობა ყოველ ჯერზე)
- რა არის იტერირებადი ობიექტი
- ციკლი + ციკლისთვის გადაცემული იტერირებადი ობიექტი + ციკლისთვის გადაცემული იტერირებადი ობიექტიდან ყოველ ჯერზე ამოღებული ელემენტის მიმართ განსახორციელებელი ინსტრუქციები
  
- while ციკლი
- for ციკლი
- მონაცემთა სტრუქტურები და მათი მეთოდები:

- სია - append(), clear(), copy(), count(), extend(), index(), insert(), pop(), remove(), reverse() და sort() მეთოდები
- ლექსიკონი - clear(), copy(), fromkeys(), get(), items(), keys(), pop(), popitem(), setdefault(), update() და values()
- კორტეჟი - count() და index() მეთოდები

# **სემინარი**
- სიმრავლე - add(), clear(), copy(), difference(): -, difference_update(): -=, discard(), intersection(): &, intersection_update(): &=, isdisjoint(), issubset(): <=, <, issuperset(): >=, >, pop(), remove(), symmetric_difference(): ^, symmetric_difference_update(): ^=, union(): | და update(): |=
- ფუნქციების, ციკლების და პირობითი მტკიცებების გამოყენება იარაღის მაღაზიის ანკეტის შესაქმნელად(input(var), answers.append(answer), ...)


# **თავი 4 - გამონაკლისები**
- რა არის გამონაკლისი

- სხვასახვა სტრუქტურის გამონაკლისები:

try/except, try/except/else, try/except/else/finally, if/raise, try/if/raise/except/else/finally
```
try:
  instruction_1
  instruction_2
  ... ... ...
  instruction_n
except Exception_1:
  print(error_message_1)
except Exception_2:
  print(error_message_2)
... ... ... ... ...:
  ... ... ... ... ...
except Exception_n:
  print(error_message_n)
else:
  last instruction
finally:
  always instruction
```
ან 
```
try:
  instruction_1
  instruction_2
  ... ... ...
  instruction_n
except (Exception_1, Exception_2, ... ... ..., Exception_n):
  print(error_message)
else:
  last instruction
finally:
  always instruction
```
- ხშირად შეხვედრილი გამონაკლისები:

IndentationError, IndexError, KeyError, KeyboardInterrupt, NameError, SyntaxError, TypeError, ValueError, ZeroDivisionError, IOError

# **სემინარი**
- ციკლების თავში გავლილი მასალის გამყარება:

ჯეისონის მსგავსი მონაცემთა სტრუქტურის შექმნა სიების და ლექსიკონების კომბინაციით და მასზე მანიპულაციები(ციკლით შემორბენა და მონაცემების ამოღება)

- პროექტი ციკლების, ფუნქციების და გამონაკლისების გამოყენებით

# **თავი 5 - ჩაშენებული მოდულები და SQL**
- რა არის ბიბლიოთეკა
- ჩაშენებული მოდულები: time, datetime, random, requests და sys (მეტი ყურადღება request-ზე და sys-ზე)
- import და საკუთარი ბიბლიოთეკის შექმნა
- შესავალი რელაციურ მონაცემთა ბაზებში - მონაცემების ცხრილური ტიპის სტრუქტურაში შენახვა(კოლონები და რიგები)
- SQLite-ი როგორც ჩაშენებული მონაცემების პერმანენტული საცავი
- CRUD ოპერაციები(ორი სიტყვით: SQL vs Python - დეკლარატიული vs იმპერატიული პარადიგმა)
- მიმდინარე და მუდმივი მეხსიერება - ზედაპირული მიმოხილვა

# **სემინარი**
- requests, time, datetime და SQLite მოდულების გამოყენებით რაიმე საიტიდან რაიმე ინფორმაციის წამოღება და მონაცემთა ბაზის ცხრილში ჩაწერა შესაბამის URL-ზე რამდენჯერმე განმეორებით რიქუესთის გაგზავნით, მიღებული პასუხების მიმდინარე მეხსიერებაში დაგროვებით და პროგრამის მუშაობის დასრულებამდე მათი მონაცემთა ბაზაში ერთიანად ჩაწერით
- sys-ის გამოყენებით ქასთომ ინფუთის იმპლემენტაცია

# **თავი 6 - ტესტირება**
- რეგულარული გამოსახულებების თეორიული მიმოხილვა, მათ შორის ამ თავის ამოხსნილი დავალებების ხარჯზე
- ტესტირება და დებაგინგი:

# **სემინარი**
- ამოხსნილი დავალებების-მათ შორის რეგულარული გამოსახულებების თავის და მონაცემთა ბაზებთან მომუშავე ფუნქციების გატესტვა


# **თავი 7 - ფაილებთან მუშაობა**
- File I/O: .csv, .png ..., with-ი და os მოდული
- რა შემთხვევებში ვიყენებთ ფაილებს და რა შემთხვევებში მონაცემთა ბაზებს
- მიმდინარე და მუმდმივი მეხსიერება - გაღრმავება, და CPU - მიმოხილვა

# **სემინარი** 
- დეკორატორები, იტერატორები და გენერატორები(yeld), iter(),  next()
- მონაცემთა ტრანზაქციები ფაილებს და SQLite-ს შორის

# **თავი 8 - OOP**
- რას გულისხმობს ობიექტზე მიმართული პროგრამირება
- კლასები და ობიექტები(ობიექტების სიცოცხლის ხანგრძლივობის ზედაპირული მიმოხილვა)
- ობიექტზე მიმართული პროგრამირების უპირატესობები და უარყოფითი მხარეები

# **თავი 9 - გარეშე ბიბლიოთეკები და სხვა დანარჩენი**
- pip, selenium(რა არის ბრაუზერი ორი სიტყვით), scrapping
- გარეშე ბიბლიოთეკები: NumPy-ი და Pandas-ი
- ურთიერთკავშირები ცხრილებს შორის - რელაციები

# **სემინარი** 
- მონაცემთა ტრანზაქციები SQLite-ს და ".csv" გაფართოების ფაილს შორის NumPy-ს და Pandas-ის გავლით
- pandas + selenium(scrapping+API+csv+db)






# **თავი 13 - Development გარემო, Linux-ი და კონკურენტული პროცესირება**
- კომპიუტერის არქიტექტურა: მომხმარებელი <-> RAM <=> (CPU <=> Hard Drive)
- ასინქრონულობა და არხები
- ოპერაციული სისტემები(ლინუქსი)
- ლოკალური სამუშაო გარემოს გამართვა - პითონის და VSCode-ის ინსტალაცია, venv
- Git-ი, GitHub-ი და ვირტუალური გარემო
- SQL, SQLite


# **თავი 14 - შესავალი ვებში და დამხმარე ტექნოლოგიები**

- შესავალი ვებში:

ინტერნეტი

რა არის ბრაუზერი

HTTP/HTTPS პროტოკოლების მიმოხილვა

CRUD - HTTP რიქუესთების აგებულება

JS, HTML და CSS-ი


# **თავი 15 - FastAPI - შესავალი**
- რა არის ფრეიმვორკი, ფრამევორკი vs ბიბლიოთეკა
- შესავალი FastAPI-ში
- SQLAlchemy, Pydantic-ი და Uvicorn-ი


# **თავი 16 ქეშირება და არარელაციური მონაცემთა ბაზები**
- ქეშირების სტრატეგიები
- Redis - ქეშირება
- ქეშირება FastAPI-ში
- არა-რელაციური მონაცემდა ბაზები: MongoDb + FastAPI

# **თავი 17 - FastAPI - მომზადება მასშტაბური პროექტებისთვის**
- ასინქრონული FastAPI
- Websocket-ი და Alembic-ი
- SOLID პრინციპები

# **თავი 18 - Django - შესავალი**
- შესავალი Django-ში
- Django Admin-ი - გაღრმავებული
- Models, Views, Templates

# **თავი 19 - Django Rest Framework - შესავალი**
- შესავალი DRF-ში
- Serializers და CRUD ოპერაციები
- DRF კლასები
- Swagger და ფაილების მენეჯმენტი

# **თავი 20 - DRF: ფუნქციონალები და მექანიზმები, და  PostgreSQL-ი**
- რეგისტრაცია და აუთენტიფიკაცია-JWT Tokens
- პაგინაცია, ფილტრაცია და ავტორიზაცია
- PostgreSQL-ი და ACID პრინციპები
- Celery(ფონზე გაშვებული პარალელური პროცესები)

# **თავი 21 - API-ს და მისი ცალკეული ფუნქციონალების ტესტირება**
- ტესტირება:

Django Project

FastAPI Project

# **თავი 22 - კონტეინერიზაცია**
- რა არის BIOS
- რა არის ვირტუალური მანქანა
- რა არის Docker-ი და Docker Compose-ი
- Virtual machine vs Docker (თითოეული მათგანის უპირატესობები და ნაკლოვანებები)


# **თავი 24 - ალგორითმები და მონაცემთა სტრუქტურები**
- ალგორითმები და მონაცემთა სტრუქტურები:

თეორიული მიმოხილვა და პრაქტიკული მაგალითები
- რეკურსია






